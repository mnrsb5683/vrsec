struct node{
  int data;
  struct node *next;
};
struct node *create(int data){
    struct node *temp=(struct node*)malloc(sizeof(struct node));
    temp->data=data;
    temp->next=NULL;
    return temp;
}
struct node *insertatbeginning(struct node *head,int data){
   struct node *temp=create(data);
   if(head==NULL){
      head=temp;
   }
   else{
      temp->next=head;
      head=temp;
   }
   return head;
}
struct node *insertatend(struct node *head,int data){
   struct node *temp=create(data),*x=head;
   if(head==NULL){
       head=temp;
   }
   else{
      while(x->next!=NULL){
         x=x->next;
      }
      x->next=temp;
   }
   return head;
}
struct node *deleteatbeginning(struct node *head){
   struct node *temp=head;
   if(head==NULL) return NULL;
   else{
      head=head->next;
      temp->next=NULL;
      free(temp);
   }
   return head;
}
struct node *deleteatend(struct node *head){
   struct node *temp=head,*x;
   if(head==NULL) return NULL;
   else if(head->next==NULL){
       head=NULL;
       free(temp);
   }
   else{
      while(temp->next!=NULL){
         x=temp;
         temp=temp->next;
     }
     x->next=NULL;
     free(temp);
  }
  return head;
}
struct node *insertatposition(struct node *head,int data,int pos){
   struct node *temp=create(data),*x=head,*y;
   if(head==NULL || pos==1){
      temp->next=head;
      head=temp;
   }
   else{
       while(--pos){
         y=x;
         x=x->next;
         if(x==NULL) break;
      }
      y->next=temp;
      temp->next=x;
   }
   return head;
}
struct node *deleteatposition(struct node *head,int pos){
   struct node *temp=head,*x;
   if(head==NULL) return NULL;
   else if(pos==1){
      head=head->next;
      temp->next=NULL;
      free(temp);
   }
   else{
      while(--pos){
        x=temp;
        temp=temp->next;
        if(temp==NULL && pos>1) return head;
     }
     x->next=temp->next;
     temp->next=NULL;
     free(temp);
  }
  return head;
}
int LinearSearch(struct node *head,int key){
   struct node *temp=head;
   while(temp!=NULL){
      if(temp->data==key) return 1;
      temp=temp->next;
   }
   return 0;
}
int LinearSearch(struct node *head,int key){
   if(head==NULL) return 0;
   if(head->data==key) return 1;
   return LinearSearch(head->next,key);
}
void display(struct node *head){
   struct node *temp=head;
   while(temp!=NULL){
      printf("%d ",temp->data);
      temp=temp->next;
   }
}
void display(struct node *head){
    if(head!=NULL){
         printf("%d ",head->data);
         display(head->next);
    }
}
void rev_display(struct node *head){
    if(head!=NULL){
         rev_display(head->next);
         printf("%d ",head->data);
    }
}
struct node *reverse(struct node *head){
   struct node *cur=head,*fwd,*newList=NULL;
   while(cur!=NULL){
      fwd=cur->next;
      cur->next=newList;
      newList=cur;
      cur=fwd;
   }
   head=newList;
   return head;
}
struct node *insertIntoSortedList(struct node *head,int data){
   struct node *temp=create(data),*x=head;
   if(head==NULL || data <= head->data){
     temp->next=head;
     head=temp;
   }
   else{
       while(x->next!=NULL){
          if(x->next->data < data) x=x->next;
          else break;
       }
       temp->next=x->next;
       x->next=temp;
   }
   return head;
}
struct node *deleteDuplicates(struct node *head){
   struct node *temp=head,*x;
   if(head==NULL || head->next==NULL) return head;
   else{
      while(temp->next!=NULL){
         if(temp->data == temp->next->data){ 
            x=temp->next;
            temp->next=x->next;
            x->next=NULL;
            free(x);
         }
         else temp=temp->next;
      }
  }
  return head;
}
int compare(struct node *headA,struct node *headB){
   struct node *tempA=headA,*tempB=headB;
   while(tempA!=NULL && tempB!=NULL){
       if(tempA->data != tempB->data) return 0;
       tempA=tempA->next;
       tempB=tempB->next;
   }
   if(tempA==NULL && tempB==NULL) return 1;
   return 0;
}
int compare(struct node *headA,struct node *headB){
   if(headA==NULL && headB==NULL) return 1;
   if(headA==NULL || headB==NULL) return 0;
   if(headA->data !=headB->data) return 0;
   return compare(headA->next,headB->next);
}
int count(struct node *head){
  return head==NULL?0:1+count(head->next);
}
int mergePoint(struct node *headA,struct node *headB){
   int ca=count(headA),cb=count(headB);
   struct node *tempA=headA,*tempB=headB;
   while(ca>cb){tempA=tempA->next;ca--;}
   while(cb>ca){tempB=tempB->next;cb--;}
   while(tempA!=tempB){
      tempA=tempA->next;
      tempB=tempB->next;
   }
   if(tempA==NULL) return -1;
   return tempA->data;
}
struct node *merge(struct node *headA,struct node *headB){
   if(headA==NULL && headB==NULL) return NULL;
   if(headA!=NULL && headB==NULL) return headA;
   if(headA==NULL && headB!=NULL) return headB;
   if(headA->data < headB->data){
      headA->next=merge(headA->next,headB);
      return headA;
   }
   else{
      headB->next=merge(headA,headB->next);
      return headB;
   }
   return NULL;
}
